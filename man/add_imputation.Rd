% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/pseval-constructors.R
\name{add_imputation}
\alias{add_imputation}
\title{Imputation models}
\usage{
add_imputation(psdesign, imputation)
}
\arguments{
\item{psdesign}{A psdesign object}

\item{imputation}{An imputation object}
}
\description{
Add imputation model to a psdesign object
}
\details{
This is a list of the available imputation models. The fundamental problem in surrogate evaluation is that there are unobserved values of the counterfactual surrogate reponses S(1). In the estimated maximum likelihood framework, for subjects missing the S(1) values, we use an auxiliary pre-treatment variable or set of variables W that is observed for every subject to estimate the distribution of S(1) | W. Typically, this W is a BIP. Then for each missing S(1), we impute likelihood contributions for each non-missing S(1) given their value of W, and average over the contributions.

\itemize{
\item \link{impute_parametric} This is a parametric imputation model that fits a linear model for the mean of S(1) | W and assumes a Gaussian distribution.
\item \link{impute_bivnorm} This is another parametric imputation model that assumes that S(1) and W are jointly normally distributed. The user must specify their mean, variances and correlation.
\item \link{impute_nonparametric} This is a non-parametric imputation model that is only valid for categorical S(1) and W. It uses the observed proportions to estimate the joint distribution of S(1), W.
\item \link{impute_semiparametric} This is a semi-parametric model that uses the semi-parametric location scale model of Heagerty and Pepe (1999). Models are specified for the location of S(1) | W and the scale of S(1) | W. Then imputations are drawn from the empirical distribution of the residuals from that model, which are then transformed to the appropriate location and scale.
}
}
\examples{
test <- psdesign(generate_example_data(n = 100), Z = Z, Y = Y.obs, S = S.1, BIP = X)

add_imputation(test, impute_parametric())
test + impute_parametric()  # same as above
}

